<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kolmoblocks: self-describing data encoding</title>
    <link>https://kolmoblocks.github.io/</link>
    <description>Recent content on Kolmoblocks: self-describing data encoding</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 17 Jul 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://kolmoblocks.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hello World Sample</title>
      <link>https://kolmoblocks.github.io/samples/hello-world/</link>
      <pubDate>Wed, 17 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kolmoblocks.github.io/samples/hello-world/</guid>
      <description>KolmoLD is a way to get data generated from others!
In the KolmoLD framework, content is generated. The formula for generating this content is defined in a manifest. Data chunks can also be defined and referenced by these formulas. Manifests and formulas are best explained by a &amp;ldquo;Hello World&amp;rdquo; example. We will create the &amp;ldquo;Hello World&amp;rdquo; string by concatenating two strings together: &amp;ldquo;Hello &amp;rdquo; and &amp;ldquo;World&amp;rdquo;. These two strings are plain text data objects.</description>
    </item>
    
    <item>
      <title>Brotli Sample</title>
      <link>https://kolmoblocks.github.io/samples/brotli/</link>
      <pubDate>Wed, 17 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kolmoblocks.github.io/samples/brotli/</guid>
      <description>KolmoLD is a way to get the support of new data formats!
KolmoLD manifests provides a way to distribute new data compression algorithms along the same channel as the compressed data. This means that a new codec that has not been installed as a browser add-on or an application upgrade is accessible client-side. Once the manifest defining the codec has been downloaded, it can be stored and re-used on all files that has been compressed with it.</description>
    </item>
    
    <item>
      <title>Data Transformation</title>
      <link>https://kolmoblocks.github.io/samples/data-transformation/</link>
      <pubDate>Wed, 17 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kolmoblocks.github.io/samples/data-transformation/</guid>
      <description>KolmoLD is a way to describe data as a transformation for another data!
A formula that transforms input data into something new can easily be implemented in the KolmoLD framework. The transformation formula is defined as an executable data object. In this example, it transforms plain text into upper case letters. A manifest defines the data objects that need to be transformed and outputs the results.
{ &#34;doi&#34;: { &#34;SHA256&#34;: &#34;</description>
    </item>
    
    <item>
      <title>Hash Calculator</title>
      <link>https://kolmoblocks.github.io/samples/hash-calculator/</link>
      <pubDate>Wed, 17 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kolmoblocks.github.io/samples/hash-calculator/</guid>
      <description>KolmoLD is a way to calculate heavy algorithms by Webassembly technology for a short time!
KolmoLD formulas are algorithms that can transform data objects. The Hash Calculator defines a formula that applies the Secure Hash Algorithm to a data object and produces a SHA256. The formula itself has been defined in an executable data object, and two arguments: data object and algorithm name can be passed in as arguments. This example uses the “Hello World” as a data object and &amp;ldquo;SHA256&amp;rdquo; for algorithm name.</description>
    </item>
    
    <item>
      <title>Type-Specific Compression</title>
      <link>https://kolmoblocks.github.io/samples/type-specific-compression/</link>
      <pubDate>Wed, 17 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kolmoblocks.github.io/samples/type-specific-compression/</guid>
      <description>KolmoLD is a way to get the best compression ratio for a specific type of data!
General-purpose lossless compression algorithms have served web developers well, but with the advent of dictionary coders compression algorithms can be tweaked to achieve optimal compression ratios for a specific context. Keeping the context in mind is possible with KolmoLD. Let’s say the first version of the dictionary required for this compression algorithm (e.g. zstandard) is trained on a set of data files.</description>
    </item>
    
    <item>
      <title>Quality Variations</title>
      <link>https://kolmoblocks.github.io/samples/quality-variations/</link>
      <pubDate>Wed, 17 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kolmoblocks.github.io/samples/quality-variations/</guid>
      <description>KolmoLD is a way to get media data with quality variations!
This use case is about a dividing image to blocks and calculating the resulting image on the client side according to traffic condition. For this example, the image was divided by frequencies after discrete fast Fourier transformation to blocks. Each block contains data with range of frequency. Low frequencies describe the main details of the image. Higher frequencies describe the precise details of the image.</description>
    </item>
    
    <item>
      <title>Summary</title>
      <link>https://kolmoblocks.github.io/summary/</link>
      <pubDate>Thu, 02 Aug 2018 18:35:05 -0400</pubDate>
      
      <guid>https://kolmoblocks.github.io/summary/</guid>
      <description>a data block serialization format for content- addressable network protocols based on cryptohash naming scheme. Kolmoblocks can be thought of as scripts for a Turing-complete DSL that take other Merkle data blocks as an input and out- put the target data block. Its design assures block composability, deterministic reproducibility and eliminates the problem of serialization format versioning hell.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://kolmoblocks.github.io/about/</link>
      <pubDate>Thu, 19 Jul 2018 18:35:05 -0400</pubDate>
      
      <guid>https://kolmoblocks.github.io/about/</guid>
      <description>In kolmoblocks, data chunks (or data blocks) are identified by their cryptographically strong hashes. For example, ”ABABABF”, an ASCII-serialized string, can be can identified by its SHA-256: CC6460622F8AFE1A4DC7A92E34D53709115B0E39CCC3F323A35FA5965DB006D6 (we will contactinate hashes in the examples to only the first 5 digits of its hex from here to keep it sane).
Such a naming scheme provides you with the global address space of data, where data block&amp;rsquo;s id only depends on the data itself, not where it came from.</description>
    </item>
    
    <item>
      <title>KolmoLD</title>
      <link>https://kolmoblocks.github.io/documentation/article/</link>
      <pubDate>Thu, 19 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://kolmoblocks.github.io/documentation/article/</guid>
      <description>KolmoLD: Data Modeling for the Modern Internet ABSTRACT KolmoLD is a framework for content-addressable networking with a programmable layer: the data objects distributed across the network can contain program code to decode the data that is specified to be executed in a sandboxed environment and references other data objects based on a cryptographic hash function naming scheme.
Traditionally, the algorithms to access given data are delivered via a channel that is separate from the one used to deliver the data itself, and usually involves installing custom software that could introduce security risks.</description>
    </item>
    
    <item>
      <title>Manifest</title>
      <link>https://kolmoblocks.github.io/documentation/manifest/</link>
      <pubDate>Thu, 19 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://kolmoblocks.github.io/documentation/manifest/</guid>
      <description>Manifest describe attributes and ways to reproduce resulting data. One of presentation form of The Manifest is JSON.
Manifest may contain:
 Properties Data Object Identifiers (DOI) Formulas Raw Value  Example 1 (manifest with one formula):
{ &amp;#34;MIME&amp;#34;: &amp;#34;text/plain; charset=utf-8&amp;#34;, &amp;#34;size&amp;#34;: 202707, &amp;#34;doi&amp;#34;: { &amp;#34;SHA256&amp;#34;: &amp;#34;6F59B23AA0D0F7BEE8AEF463F1527FB025217095707B72D25F25C8AE62EA58F6&amp;#34; }, &amp;#34;formulas&amp;#34;: [ { &amp;#34;actor&amp;#34;: { &amp;#34;wasm&amp;#34;: { &amp;#34;doi&amp;#34;: { &amp;#34;SHA256&amp;#34;: &amp;#34;740F4421EBC579AFE1F4FB0F57C15E698B7BB525EA19E22B96634D49BB2147EE&amp;#34; } } }, &amp;#34;parameters&amp;#34;: { &amp;#34;arg1&amp;#34;: { &amp;#34;doi&amp;#34;: { &amp;#34;SHA256&amp;#34;: &amp;#34;ABCF598718AEAC83B850A6BF0773F3B8C3F8E43F33A05F4A571CFF5355DE58AE&amp;#34; } } } } ] } Example 2 (manifest with raw value):</description>
    </item>
    
    <item>
      <title>WebAssembly</title>
      <link>https://kolmoblocks.github.io/documentation/wasm/</link>
      <pubDate>Thu, 19 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://kolmoblocks.github.io/documentation/wasm/</guid>
      <description>One of the supported actors in Manifest is WebAssembly (WASM). To gain support as an actor in Kolmonet, WASM must support the special interface (listed below). The implemented sequence of calls is:
 For each argument:  Reserve memory for the argument name (_set_arg_name) Set to reserved memory name of the argument Get argument&amp;rsquo;s index (_get_arg_index) Reserve memory for the argument&amp;rsquo;s value (_set_arg) Set to reserved memory argument&amp;rsquo;s value  Execute WASM algorithm (_exec) Get result&amp;rsquo;s pointer and size (_get_result, _get_result_size) If any errors occur get error&amp;rsquo;s pointer and size to get an error message(_get_last_error, _get_last_error_size)  WASM interface (Rust):</description>
    </item>
    
    <item>
      <title>learning</title>
      <link>https://kolmoblocks.github.io/documentation/learning_resources/</link>
      <pubDate>Sun, 15 Jul 2018 18:02:42 -0400</pubDate>
      
      <guid>https://kolmoblocks.github.io/documentation/learning_resources/</guid>
      <description>The list of (external) learning materials that people have found useful to learn more about the relevant technologies, to understand the kolmoblocks project, motivation and the context behind it, as well as its positioning within the industry.
Feel free to propose additions by opening a PR with your changes. The Wikipedia definition pages and the official project&amp;rsquo;s websites might be ommitted as self-evident.
Relevant information theory concepts  &amp;ldquo;Kolmogorov Complexity and Our Search for Meaning&amp;rdquo; by Noson S.</description>
    </item>
    
    <item>
      <title>whitepaper</title>
      <link>https://kolmoblocks.github.io/documentation/whitepaper/</link>
      <pubDate>Sun, 15 Jul 2018 18:02:42 -0400</pubDate>
      
      <guid>https://kolmoblocks.github.io/documentation/whitepaper/</guid>
      <description>&lt;p&gt;Kolmogorov data blocks (or kolmoblocks) is a data block serialization format for content-
addressable network protocols based on cryptohash naming scheme. Kolmoblocks can be thought
of as scripts for a Turing-complete DSL that take other Merkle data blocks as an input and out-
put the target data block. Its design assures block composability, deterministic reproducibility and
eliminates the problem of serialization format versioning hell.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>